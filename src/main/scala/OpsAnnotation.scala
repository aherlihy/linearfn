package linearfn

import scala.annotation.MacroAnnotation
import scala.quoted.*
import scala.annotation.experimental

/**
 * Macro annotation to mark classes for automatic extension method generation.
 *
 * This annotation works in conjunction with the sbt source generator to automatically
 * create extension methods for RestrictedSelectable.
 *
 * Usage:
 * {{{
 * @ops
 * case class Person(name: String, age: Int):
 *   def greet(): String = s"Hello, I'm $name"
 *   def combine(other: Person): Person = ???
 * }}}
 *
 * The sbt source generator will automatically create PersonExtensions.scala with:
 * {{{
 * extension [D <: Tuple](p: RestrictedSelectable.Restricted[Person, D])
 *   def greet(): RestrictedSelectable.Restricted[String, D] = ...
 *   def combine[D2 <: Tuple](other: RestrictedSelectable.Restricted[Person, D2]): ... = ...
 * }}}
 */
@experimental
class ops extends MacroAnnotation:
  def transform(using Quotes)(tree: quotes.reflect.Definition, companion: Option[quotes.reflect.Definition]): List[quotes.reflect.Definition] =
    import quotes.reflect.*

    tree match
      case ClassDef(className, ctr, parents, self, body) =>
        // Extract the type name
        val typeSymbol = tree.symbol
        val typeName = typeSymbol.name

        // Report information about the annotation
        report.info(s"\n@ops annotation detected for $typeName")
        report.info(s"Extension methods will be auto-generated by sbt source generator in ${typeName}Extensions.scala")

        // Just return the original class - extensions are generated by sbt source generator
        List(tree)

      case _ =>
        report.error("@ops can only be applied to classes")
        List(tree)
